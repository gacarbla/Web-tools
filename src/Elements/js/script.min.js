/**
* @typedef {Object} ElementConfig
* @property {string} name - The name of the element to be replaced.
* @property {string} style - The styles to be inserted for the element.
* @property {string} value - The new HTML structure to replace the original element.
* @property {function} [beforeCreate] - Function to execute before creating the new element.
* @property {function} [onClick] - Function to execute when the new element is clicked.
* @property {function} [onInput] - Function to execute when text is input in the new element.
* @property {function} [afterCreate] - Function to execute after the new element is created.
*/
/**
* ElementImporter class to import and replace custom HTML elements with specified configurations.
*/
const ElementImporter=class{
/**
* @param {ElementConfig[]} elements - Configuration objects for elements to be replaced.
*/
constructor(elements){this.c=document.querySelector('el-import');if(!this.c){console.error("No se encontrÃ³ el elemento 'el-import'");return;}this.e=elements;this.insertStyles();this.replaceElements();}
/**
* Inserts styles defined in the element configurations into the 'el-import' container.
* @return {void}
*/
insertStyles(){if(!this.c)return;const styles=this.e.map(c=>c.style).join('');this.c.innerHTML=styles;}
/**
* Replaces elements specified in the element configurations.
* Executes optional lifecycle functions at the appropriate stages.
* @return {void}
*/
replaceElements(){if(!this.c)return;this.e.forEach(c=>{const e=document.querySelectorAll(c.name);e.forEach(o=>{if(c.beforeCreate)c.beforeCreate(o);const n=document.createElement('div');n.innerHTML=c.value;const r=n.firstElementChild;if(r){Array.from(o.attributes).forEach(attr=>{r.setAttribute(attr.name,attr.value);});if(c.value.includes('$content')){r.innerHTML=r.innerHTML.replace('$content', o.innerHTML);}else{r.innerHTML=o.innerHTML;}if(c.onClick){r.addEventListener('click',()=>c.onClick(r));}if(c.onInput&&r.tagName.toLowerCase()==='input') {r.addEventListener('input',()=>c.onInput(r));}o.replaceWith(r);if(c.afterCreate)c.afterCreate(r);}});});}}